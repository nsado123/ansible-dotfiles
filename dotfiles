#!/bin/bash

set -e  # Exit immediately if a command fails

# Color Codes
RESTORE='\033[0m'
NC='\033[0m'
GREEN='\033[00;32m'
RED='\033[00;31m'
LBLACK='\033[01;30m'
LGREEN='\033[01;32m'
LRED='\033[01;31m'

# Emojis
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
OVERWRITE='\e[1A\e[K'

# Paths
DOTFILES_LOG="$HOME/.dotfiles.log"
DOTFILES_DIR="$HOME/.dotfiles"
SSH_DIR="$HOME/.ssh"
IS_FIRST_RUN="$HOME/.dotfiles_run"
DEVICE_TYPE_FILE="/tmp/device_type"
DOTFILES_VERSION="1.0.0"

# Logging Functions
function __task {
  if [[ $TASK != "" ]]; then
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  fi
  TASK=$1
  printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

function _cmd {
  [[ ! -f $DOTFILES_LOG ]] && touch $DOTFILES_LOG
  > $DOTFILES_LOG
  if eval "$1" 1> /dev/null 2> $DOTFILES_LOG; then
    return 0
  fi
  printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
  while read line; do printf "      ${line}\n"; done < $DOTFILES_LOG
  rm $DOTFILES_LOG
  exit 1
}

function _clear_task { TASK=""; }
function _task_done { printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"; _clear_task; }

# 🚀 **Install Ansible If Not Installed**
if ! command -v ansible &>/dev/null; then
  __task "Installing Ansible"
  _cmd "sudo pacman -Sy --noconfirm"
  _cmd "sudo pacman -S --noconfirm ansible python-argcomplete"
fi

# 🛠 **Clone or Update Dotfiles Repo**
if [[ ! -d "$DOTFILES_DIR" ]]; then
  __task "Cloning dotfiles repository"
  _cmd "git clone --quiet https://github.com/nsado123/ansible-dotfiles.git $DOTFILES_DIR"
else
  __task "Checking for dotfiles updates"
  if git -C "$DOTFILES_DIR" diff --quiet; then
    echo -e "${CHECK_MARK} ${GREEN}Dotfiles are already up to date.${NC}"
  else
    __task "Updating dotfiles"
    _cmd "git -C $DOTFILES_DIR pull --quiet"
  fi
fi

# 🛠 **Update Ansible Galaxy Roles If Required**
if [[ -f "$DOTFILES_DIR/requirements.yml" ]]; then
  __task "Updating Ansible Galaxy"
  _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements.yml"
else
  echo -e "${RED}⚠️ No Ansible Galaxy requirements found. Skipping...${NC}"
fi

# Run Ansible and capture output
ANSIBLE_LOG="/tmp/ansible_output.log"
__task "Running Ansible Playbook"
_cmd "ansible-playbook main.yml > $ANSIBLE_LOG 2>&1"

# Process the log to extract meaningful lines
echo -e "\n${LGREEN}📜 Ansible Execution Summary:${NC}"
grep -E "TASK|changed=|failed=|ok=" $ANSIBLE_LOG | sed -E \
  -e "s/TASK \[.*\]/🔹 ${LGREEN}&${NC}/" \
  -e "s/changed=([0-9]+)/${LGREEN}Changed: \1${NC}/" \
  -e "s/failed=([0-9]+)/${LRED}Failed: \1${NC}/" \
  -e "s/ok=([0-9]+)/${GREEN}OK: \1${NC}/"

# Detect errors
if grep -q "failed=" "$ANSIBLE_LOG"; then
  echo -e "${LRED}❌ Ansible reported errors. Check $ANSIBLE_LOG for details.${NC}"
  exit 1
fi

_task_done

# ✅ **First Run Detection & Version Tracking**
if [[ -f "$IS_FIRST_RUN" ]]; then
  INSTALLED_VERSION=$(cat "$IS_FIRST_RUN")
  if [[ "$INSTALLED_VERSION" == "$DOTFILES_VERSION" ]]; then
    echo -e "${CHECK_MARK} ${GREEN}Dotfiles are already installed and up to date.${NC}"
  else
    echo -e "${RED}⚠️ Updating dotfiles from version $INSTALLED_VERSION to $DOTFILES_VERSION...${NC}"
    echo "$DOTFILES_VERSION" > "$IS_FIRST_RUN"
  fi
else
  echo "$DOTFILES_VERSION" > "$IS_FIRST_RUN"
  echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
  echo -e "${RED}🔄 Please reboot your computer to complete the setup.${NC}"
fi
